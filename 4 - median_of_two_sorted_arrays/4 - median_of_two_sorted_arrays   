{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "\n",
    "# need to use division since python default only get integers\n",
    "\n",
    "def findMedianSortedArrays(nums1, nums2):\n",
    "    total_num = nums1 + nums2\n",
    "    sorted_list = sorted(total_num)\n",
    "    if len(sorted_list)%2==0:\n",
    "        median_num = (sorted_list[int(len(sorted_list)/2)-1] + sorted_list[int(len(sorted_list)/2)])/2\n",
    "    else:\n",
    "        median_num = int((len(sorted_list)+1)/2)\n",
    "    return sorted_list, median_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9], 6.0)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums1 = [1, 2,3,4,5,6,7,8]\n",
    "nums2 = [9,8,7,6]\n",
    "\n",
    "\n",
    "findMedianSortedArrays(nums1, nums2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
